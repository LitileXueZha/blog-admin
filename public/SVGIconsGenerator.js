const fs = require('fs');
const https = require('https');
const path = require('path');

const SVGIcons = require('./SVGIcons.json');

const REG_TRANSFORM = /(^\w|-\w)/g;
const REG_TITLE = /<title>.+<\/title>/gm;
const REG_SVGHTML = /^<svg.+?>(.+)<\/svg>/m;
const DIR_CACHE = path.resolve(__dirname, '../dist/cache/icons');
const DIR_OUTPUT = path.resolve(__dirname, '../src/assets/icons');
const EXT = 'js';

function template(name, html) {
    return `
// DO NOT EDIT
// GENERATED BY SVGIconsGenerator.js
import React from 'react';

function ${name}(props) {
    return React.createElement('svg', {
        ...props,
        className: \`SVGIcon\${props.className ? \` \${props.className}\` : ''}\`,
        viewBox: '0 0 512 512',
        //xmlns: 'http://www.w3.org/2000/svg',
        dangerouslySetInnerHTML: {__html:'${html}'},
    });
}

${name}.displayName = '${name}';
export default React.memo(${name});
`.replace(/^\s+/, '');
}

class SVGIconsGenerator {
    constructor() {
        const { downloadURL, version, basename, icons, ext } = SVGIcons;
        const versionNum = version.replace(/[^\d]/g, '');

        this.url = `${downloadURL}@${version}${basename}`;
        this.icons = icons.map((name) => {
            const url = `${this.url}/${name}.${ext}`;
            const filename = name.replace(REG_TRANSFORM, (a) => a.replace('-', '').toUpperCase());

            return {
                name: filename,
                url,
                cacheKey: `${name}.v${versionNum}.${ext}`,
            };
        });
    }

    run() {
        for (let i = 0, len = this.icons.length; i < len; i++) {
            const icon = this.icons[i];
            const outputFile = path.resolve(DIR_OUTPUT, `${icon.name}.${EXT}`);

            fs.access(outputFile, async (err) => {
                if (err) {
                    // 文件不存在
                    const content = await SVGIconsGenerator.getSVG(icon);
                    const innerHTML = content.match(REG_SVGHTML)[1];
                    const fileContent = template(icon.name, innerHTML);

                    fs.writeFile(outputFile, fileContent, (e) => {
                        if (e) {
                            throw e;
                        }
                    });
                }
            });
        }

        const entryFile = path.resolve(DIR_OUTPUT, 'index.js');
        let fileContent = this.icons.map(({ name }) => `
            export { default as ${name} } from './${name}.${EXT}';
        `.trim()).join('\n');

        fileContent += '\n';
        fs.writeFile(entryFile, fileContent, (err) => {
            if (err) {
                throw err;
            }
        });
    }

    static getSVG(icon) {
        return new Promise((resolve, reject) => {
            const cacheFile = path.resolve(DIR_CACHE, icon.cacheKey);

            fs.readFile(cacheFile, 'utf8', (err, data) => {
                if (err) {
                    // 本地无缓存
                    const req = https.get(icon.url, (res) => {
                        res.setEncoding('utf8');

                        let rawData = '';

                        res.on('data', (chunk) => rawData += chunk);
                        res.on('end', () => {
                            // 移除 <title>
                            rawData = rawData.replace(REG_TITLE, '');
                            fs.writeFile(cacheFile, rawData, (e) => {
                                if (e) {
                                    throw e;
                                }
                            });
                            resolve(rawData);
                        });
                    });

                    req.on('error', reject);
                    req.end();
                    return;
                }
                resolve(data);
            });
        });
    }

    static mkdir(dir) {
        fs.access(dir, fs.constants.W_OK, (err) => {
            if (err) {
                fs.mkdir(dir, { recursive: true }, (e) => {
                    if (e) {
                        throw e;
                    }
                });
            }
        });
    }
}

// SVGIconsGenerator.mkdir(DIR_CACHE);
// SVGIconsGenerator.mkdir(DIR_OUTPUT);
fs.mkdirSync(DIR_CACHE, { recursive: true });
fs.mkdirSync(DIR_OUTPUT, { recursive: true });
(new SVGIconsGenerator()).run();
